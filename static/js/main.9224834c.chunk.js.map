{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","onChange","type","App","state","searchField","e","setState","target","value","axios","get","res","this","data","filteredMonsters","filter","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","querySelector","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oXAaeA,G,kBAVF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCOTC,EAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACI,yBAAKP,UAAU,aACVO,EAASC,IAAI,SAAAT,GACV,OAAO,kBAAC,EAAD,CAAMU,IAAKV,EAAQI,GAAIJ,QAASA,QCKxCW,G,MAXG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC9B,OACI,2BACIZ,UAAU,aACVa,KAAK,SACLF,YAAaA,EACbC,SAAUA,MC8BPE,E,2MA/BXC,MAAQ,CACJR,SAAU,GACVS,YAAa,I,EASjBJ,SAAW,SAAAK,GACP,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,iNANpBC,IAAMC,IAAI,8C,OAAtBC,E,OAENC,KAAKN,SAAS,CAAEX,SAAUgB,EAAIE,O,mIAOxB,IAAD,EAC6BD,KAAKT,MAA/BR,EADH,EACGA,SAAUS,EADb,EACaA,YACZU,EAAmBnB,EAASoB,OAAO,SAAA5B,GAAO,OAC5CA,EAAQK,KAAKwB,cAAcC,SAASb,EAAYY,iBAGpD,OACI,yBAAK5B,UAAU,aACX,gDACA,kBAAC,EAAD,CAAWW,YAAY,kBAAkBC,SAAUY,KAAKZ,WACxD,kBAAC,EAAD,CAAUL,SAAUmB,S,GA1BlBI,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCJ,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/B,QACfyB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC1FjEC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,UDcpB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,iBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,iBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQ9C,IAAI,gBAEnB,MAApB4C,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BV,OAAOC,SAASuC,aAKpBpC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCvC/BE,K","file":"static/js/main.9224834c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nconst Card = ({ monster }) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\r\n            <h2>{monster.name}</h2>\r\n            <p>{monster.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './cardList.css';\r\n\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({ monsters }) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {monsters.map(monster => {\r\n                return <Card key={monster.id} monster={monster} />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './searchBox.css';\r\n\r\nconst SearchBox = ({ placeholder, onChange }) => {\r\n    return (\r\n        <input\r\n            className=\"search-box\"\r\n            type=\"search\"\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './app.css';\r\n\r\nimport CardList from './components/CardList/CardList';\r\nimport SearchBox from './components/SearchBox/SearchBox';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        monsters: [],\r\n        searchField: ''\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({ monsters: res.data })\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ searchField: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        const { monsters, searchField } = this.state;\r\n        const filteredMonsters = monsters.filter(monster =>\r\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Monsters Rolodex</h1>\r\n                <SearchBox placeholder=\"search monsters\" onChange={this.onChange} />\r\n                <CardList monsters={filteredMonsters} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}